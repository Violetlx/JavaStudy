package com.javase.day3.a;

import com.javase.day3.entity.Person;

/**
 * 方法的创建和使用
 * @author lixuan
 * @Date 2024/5/28 16:28
 */
public class Main3 {
    /**
     * 对象光有属性还不行，对象还需要具有一定的行为，就像我们人可以行走、可以跳跃、可以思考一样
     * 而对象也可以做出一些行为，我们可以定义方法来实现(在C语言中叫做函数)
     *
     * 方法是语句的集合，是为了完成某件事情而存在的。完成某件事情，可以有结果，也可以做了就做了，不返回结果。
     * 比如计算两个数字的和，我们需要得到计算后的结果，所以说方法需要有返回值；
     * 又比如，我们只想把数字打印在控制台，只需要打印就行，不需要给我结果，所以说这个方法就不需要返回值。
     *
     * 方法的定义如下：
     * 返回值类型 方法名(参数列表) {
     *     方法体...
     * }
     */
    public static void main(String[] args) {
        Person person = new Person();
        person.setName("李四");
        person.setAge(20);
        person.setSex("男");

        //使用,我们只需要使用 . 运算符，就可以执行定义好的方法了，只需要 .方法名称() 即可
        person.hello();

        System.out.println("-------------------------");

        //3+5
        int sum = getSum(3, 5);
        System.out.println(sum);

        System.out.println("-------------------------");

        //让对象来告诉
        //现在我们要让这个对象来计算3+5的结果
        int sum1 = person.getSum(3, 5);
        //成功得到8，实际上这里的println也是在调用方法进行打印操作
        System.out.println(sum1);

        System.out.println("-------------------------");

        //注意：方法定义时编写的参数，我们一般称之为形式参数，而调用方法实际传入的参数，我们称为实际参数

        //关于return关键字：
        //在我们使用return关键字之后，方法就会直接结束并返回结果，所以说在这之后的任何代码，都是不可能达到的
        //在return后编写的代码，会导致编译不通过，因为存在不可达语句。

        //如果我们程序中出现了分支语句，那么必须保证每一个分支都有返回值才可以(方法)
        //只要任何一个分支缺少return语句，都无法正常通过编译，总之就是必须考虑到所有的情况，任何情况下都必须有返回值

        //当然如果方法没有返回值，我们也可以使用return语句，不需要跟上任何内容，只不过这种情况下使用，仅仅是为了快速结束方法的执行
        test(10);
        test(20);

        System.out.println("-------------------------");

        //参数传递问题
        Person p = new Person();
        int a = 10,b = 20;
        p.swap(a,b);
        System.out.println(a+" "+b);

        //测试结果发现a和b的值并没有发生交换，但是按照我们的方法逻辑来说，应该是会交换才对，这是为什么呢？
        //实际上这里仅仅只是将值赋值给了函数里面的变量而已(相当于是变量的赋值)
        //所以说我们交换的仅仅是方法中的a和b，参数传递仅仅是值传递，我们是没有办法操作到外面的a和b的

        System.out.println("-------------------------");

        Person p1 = new Person();
        //先在外面修改一次
        p1.setName("张三");
        p1.modify(p1);
        System.out.println(p1.getName());
        //结果为lbwnb
        //前面不是说只是值传递吗？怎么这里又可以修改成功呢？
        //确实，这里同样是进行的值传递，只不过不要忘了，我们前面说的清清楚楚，引用类型的变量，仅仅存放的是对象的引用，而不是对象本身。
        //那么这里进行了值传递，相当于将对象的引用复制到了方法内部的变量中，而这个内部变量，依然是一个引用的同一个对象，所以说这里再方法内操作
        //相当于直接操作外面的定义对象
    }


    /**
     * 定义两数相加
     */
    static int getSum(int a, int b) {
        return a+b;
    }

    /**
     * return使用
     */
    static void test(int a) {
        //当a等于10时，结束方法，后面无论有没有代码都不会执行了
        if (a == 10) {
            System.out.println("中奖了！！！");
            return;
        }
        //不是的情况就正常执行
        System.out.println("hello world!");
    }






}
